#!/usr/bin/env node

/**
 * Script de validation du r√©cepteur Chromecast HLS s√©curis√©
 * V√©rifie que tous les √©l√©ments n√©cessaires sont pr√©sents et corrects
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Validation du r√©cepteur Chromecast HLS s√©curis√©...\n');

let errors = 0;
let warnings = 0;

function error(message) {
    console.log(`‚ùå ERREUR: ${message}`);
    errors++;
}

function warning(message) {
    console.log(`‚ö†Ô∏è  ATTENTION: ${message}`);
    warnings++;
}

function success(message) {
    console.log(`‚úÖ ${message}`);
}

// V√©rifier que index.html existe
if (!fs.existsSync('index.html')) {
    error('Le fichier index.html est manquant');
} else {
    success('Fichier index.html trouv√©');
    
    // Lire et analyser le contenu
    const content = fs.readFileSync('index.html', 'utf8');
    
    // V√©rifications du contenu
    const checks = [
        {
            pattern: /cast\.framework\.CastReceiverContext/,
            message: 'Google Cast Framework import√©',
            required: true
        },
        {
            pattern: /setMessageInterceptor/,
            message: 'Intercepteur de messages configur√©',
            required: true
        },
        {
            pattern: /XMLHttpRequest/,
            message: 'Interception XMLHttpRequest impl√©ment√©e',
            required: true
        },
        {
            pattern: /window\.fetch/,
            message: 'Interception fetch impl√©ment√©e',
            required: true
        },
        {
            pattern: /authToken/,
            message: 'Gestion des tokens d\'authentification',
            required: true
        },
        {
            pattern: /\.m3u8/,
            message: 'Support des fichiers HLS (.m3u8)',
            required: true
        },
        {
            pattern: /\.ts.*token/,
            message: 'Ajout de tokens aux segments TS',
            required: true
        },
        {
            pattern: /https:\/\/www\.gstatic\.com\/cast\/sdk/,
            message: 'Google Cast SDK charg√© depuis CDN',
            required: true
        }
    ];
    
    checks.forEach(check => {
        if (check.pattern.test(content)) {
            success(check.message);
        } else {
            if (check.required) {
                error(check.message + ' - MANQUANT');
            } else {
                warning(check.message + ' - recommand√©');
            }
        }
    });
    
    // V√©rifier la taille du fichier (ne doit pas √™tre trop volumineux)
    const stats = fs.statSync('index.html');
    const sizeKB = Math.round(stats.size / 1024);
    
    if (sizeKB > 100) {
        warning(`Fichier assez volumineux: ${sizeKB}KB (recommand√© < 100KB)`);
    } else {
        success(`Taille du fichier acceptable: ${sizeKB}KB`);
    }
    
    // V√©rifier les √©l√©ments HTML essentiels
    const htmlChecks = [
        { pattern: /<meta.*viewport/, message: 'Meta viewport configur√©' },
        { pattern: /<title>/, message: 'Titre de la page d√©fini' },
        { pattern: /charset="?UTF-8"?/, message: 'Encodage UTF-8 d√©fini' },
        { pattern: /#player/, message: '√âl√©ment player pr√©sent' },
        { pattern: /#debug/, message: 'Interface de debug pr√©sente' }
    ];
    
    htmlChecks.forEach(check => {
        if (check.pattern.test(content)) {
            success(check.message);
        } else {
            warning(check.message + ' - recommand√©');
        }
    });
}

// V√©rifier les autres fichiers
const files = [
    { name: 'README.md', required: false, message: 'Documentation pr√©sente' },
    { name: 'test.html', required: false, message: 'Page de test disponible' },
    { name: 'package.json', required: false, message: 'Configuration npm pr√©sente' }
];

files.forEach(file => {
    if (fs.existsSync(file.name)) {
        success(file.message);
    } else {
        if (file.required) {
            error(`${file.name} manquant`);
        } else {
            warning(`${file.name} recommand√© mais absent`);
        }
    }
});

// V√©rifications sp√©cifiques au d√©ploiement
console.log('\nüìã Checklist de d√©ploiement:');

const deploymentChecks = [
    '1. H√©berger le fichier sur un serveur HTTPS',
    '2. Enregistrer l\'application sur Google Cast Developer Console',
    '3. Configurer l\'App ID dans votre application mobile',
    '4. Tester avec un appareil Chromecast r√©el',
    '5. Ajouter votre Chromecast comme device de test',
    '6. V√©rifier les logs dans la console du r√©cepteur'
];

deploymentChecks.forEach(check => {
    console.log(`üìù ${check}`);
});

// R√©sum√©
console.log('\n' + '='.repeat(50));

if (errors === 0 && warnings === 0) {
    console.log('üéâ PARFAIT! Le r√©cepteur est pr√™t pour le d√©ploiement.');
} else if (errors === 0) {
    console.log(`‚úÖ Le r√©cepteur est fonctionnel avec ${warnings} suggestion(s) d'am√©lioration.`);
} else {
    console.log(`‚ùå Le r√©cepteur a ${errors} erreur(s) et ${warnings} avertissement(s) √† corriger.`);
}

console.log('\nüöÄ Commandes de d√©marrage rapide:');
console.log('  npm start          # Servir en local (HTTP)');
console.log('  npm run start:https # Servir en local (HTTPS)');
console.log('  npm run tunnel     # Cr√©er un tunnel public avec ngrok');
console.log('  npm test           # Ouvrir la page de test');

process.exit(errors > 0 ? 1 : 0); 